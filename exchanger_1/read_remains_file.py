from exchanger_1.currency_pair import *import csvclass ReadingRemains(Course):    def __init__(self, name, available, available_uah):        super().__init__(name, available, available_uah)    def operationUAH_USD(self):        try:            client = int(input('\nAmount in UAH: '))            if client > 0:                conversion = client / self.privat_course["usd"]["buy"]                rate = 1 / self.privat_course["usd"]["buy"]                remainder = self.available - conversion                if self.available >= conversion:                    balanceUAH_USD = self.available_uah + client                    with open("fileUAH_USD.csv", "a") as f:                        writer = csv.writer(f)                        writer.writerow(["client", "conversion", "rate", "remainder", "balanceUAH_USD"])                        writer.writerow([client, round(conversion, 2), round(rate, 2), round(remainder, 2), balanceUAH_USD])                    print(f'Conversion UAH -> USD: {round(conversion, 2)} | RATE_USD: {round(rate, 2)}\n'                          f'Starting balance_USD: {self.available}\n'                          f'Balance update_USD: {round(remainder, 2)}\n'                          f'Starting balance_UAH: {self.available_uah}\n'                          f'Balance update_UAH: {balanceUAH_USD}')                else:                    print(f'\nSorry, error.The currency balance is not enough\n'                          f'To complete the transaction, you must: {round(conversion, 2)} USD\n'                          f'Available balance_USD: {self.available}')            else:                print(f'\nYour exchange request:{client}_UAH is not correct')        except ValueError:            print('\nYour exchange request is not correct,value must be an integer')        except TypeError:            print('\nSorry: INVALID CURRENCY USD')        finally:            print('Verification done\n')    def operationUAH_UER(self):        try:            client = int(input('\nAmount in UAH: '))            if client > 0:                conversion = client / self.privat_course["eur"]["buy"]                rate = 1 / self.privat_course["eur"]["buy"]                remainder = self.available - conversion                if self.available >= conversion:                    balanceUAH_EUR = self.available_uah + client                    with open("fileUAH_UER.csv", "a") as f:                        writer = csv.writer(f)                        writer.writerow(["client", "conversion", "rate", "remainder", "balanceUAH_EUR"])                        writer.writerow([client, round(conversion, 2), round(rate, 2), round(remainder, 2), balanceUAH_EUR])                    print(f'\nConversion UAH -> EUR: {round(conversion, 2)} | RATE_EUR: {round(rate, 2)}\n'                          f'Starting balance_EUR: {self.available}\n'                          f'Balance update_EUR: {round(remainder, 2)}\n'                          f'Starting balance_UAH: {self.available_uah}\n'                          f'Balance update_UAH: {balanceUAH_EUR}')                else:                    print(f'\nSorry, error.The currency balance is not enough\n'                          f'To complete the transaction, you must: {round(conversion, 2)} EUR\n'                          f'Available balance_EUR: {self.available}')            else:                print(f'\nYour exchange request:{client}_UAH is not correct')        except ValueError:            print('\nYour exchange request is not correct,value must be an integer')        except TypeError:            print('\nSorry: INVALID CURRENCY EUR')        finally:            print('Verification done\n')    def operationUAH_BTC(self):        try:            client = int(input('\nAmount in UAH: '))            if client > 0:                conversion = client / self.privat_course["btc"]["buy"]                rate = 1 / self.privat_course["btc"]["buy"]                remainder = self.available - conversion                if self.available >= conversion:                    balanceUAH_BTC = self.available_uah + client                    with open("fileUAH_BTC.csv", "a") as f:                        writer = csv.writer(f)                        writer.writerow(["client", "conversion", "rate", "remainder", "balanceUAH_BTC"])                        writer.writerow([client, round(conversion, 2), round(rate, 2), round(remainder, 2), balanceUAH_BTC])                    print(f'\nConversion UAH -> BTC: {round(conversion, 2)} | RATE_BTC: {round(rate, 2)}\n'                          f'Starting balance_BTC: {self.available}\n'                          f'Balance update_BTC: {round(remainder, 2)}\n'                          f'Starting balance_UAH: {self.available_uah}\n'                          f'Balance update_UAH: {balanceUAH_BTC}')                else:                    print(f'\nSorry, error.The currency balance is not enough\n'                          f'To complete the transaction, you must: {round(conversion, 2)} BTC\n'                          f'Available balance_BTC: {self.available}')            else:                print(f'\nYour exchange request:{client}_UAH is not correct')        except ValueError:            print('\nYour exchange request is not correct,value must be an integer')        except TypeError:            print('\nSorry: INVALID CURRENCY BTC')        finally:            print('Verification done\n')    def operationUSD_UAH(self):        try:            client = int(input('\nAmount in USD: '))            if client > 0:                conversion = client * self.privat_course["usd"]["sale"]                rate = 1 * self.privat_course["usd"]["sale"]                remainder = self.available_uah - conversion                if self.available_uah >= conversion:                    balanceUSD_UAH = self.available + client                    with open("fileUSD_UAH.csv", "a") as f:                        writer = csv.writer(f)                        writer.writerow(["client", "conversion", "rate", "remainder", "balanceUSD_UAH"])                        writer.writerow([client, round(conversion, 2), round(rate, 2), round(remainder, 2), balanceUSD_UAH])                    print(f'\nConversion USD -> UAH: {round(conversion, 2)} | RATE_UAH: {round(rate, 2)}\n'                          f'Starting balance_UAH: {self.available_uah}\n'                          f'Balance update_UAH: {round(remainder, 2)}\n'                          f'Starting balance_USD: {self.available}\n'                          f'Balance update_USD: {balanceUSD_UAH}')                else:                    print(f'\nSorry, error.The currency balance is not enough\n'                          f'To complete the transaction, you must: {round(conversion, 2)} UAH\n'                          f'Available balance_UAH: {self.available_uah}')            else:                print(f'\nYour exchange request:{client}_USD is not correct')        except ValueError:            print(f'\nYour exchange request is not correct,value must be an integer')        except TypeError:            print('\nSorry: INVALID CURRENCY USD')        finally:            print('Verification done\n')    def operationEUR_UAH(self):        try:            client = int(input('\nAmount in EUR: '))            if client > 0:                conversion = client * self.privat_course["eur"]["buy"]                rate = 1 * self.privat_course["eur"]["buy"]                remainder = self.available_uah - conversion                if self.available_uah >= conversion:                    balanceEUR_UAH = self.available + client                    with open("fileEUR_UAH.csv", "a") as f:                        writer = csv.writer(f)                        writer.writerow(["client", "conversion", "rate", "remainder", "balanceEUR_UAH"])                        writer.writerow([client, round(conversion, 2), round(rate, 2), round(remainder, 2), balanceEUR_UAH])                    print(f'\nConversion EUR -> UAH: {round(conversion, 2)} | RATE_UAH: {round(rate, 2)}\n'                          f'Starting balance_UAH: {self.available_uah}\n'                          f'Balance update_UAH: {round(remainder, 2)}\n'                          f'Starting balance_EUR: {self.available}\n'                          f'Balance update_EUR: {balanceEUR_UAH}')                else:                    print(f'\nSorry, error.The currency balance is not enough\n'                          f'To complete the transaction, you must: {round(conversion, 2)} UAH\n'                          f'Available balance_UAH: {self.available_uah}')            else:                print(f'\nYour exchange request:{client}_EUR is not correct')        except ValueError:            print('\nYour exchange request is not correct,value must be an integer')        except TypeError:            print('\nSorry: INVALID CURRENCY EUR')        finally:            print('Verification done\n')    def operationBTC_UAH(self):        try:            client = int(input('\nAmount in BTC: '))            if client > 0:                conversion = client * self.privat_course["btc"]["buy"]                rate = 1 * self.privat_course["btc"]["buy"]                remainder = self.available - conversion                if self.available_uah >= conversion:                    balanceBTC_UAH = self.available + client                    with open("fileBTC_UAH.csv", "a") as f:                        writer = csv.writer(f)                        writer.writerow(["client", "conversion", "rate", "remainder", "balanceBTC_UAH"])                        writer.writerow([client, round(conversion, 2), round(rate, 2), round(remainder, 2), balanceBTC_UAH])                    print(f'\nConversion BTC -> UAH: {round(conversion, 2)} | RATE_UAH: {round(rate, 2)}\n'                          f'Starting balance_UAH: {self.available_uah}\n'                          f'Balance update_UAH: {round(remainder, 2)}\n'                          f'Starting balance_BTC: {self.available}\n'                          f'Balance update_BTC: {balanceBTC_UAH}')                else:                    print(f'\nSorry, error.The currency balance is not enough\n'                          f'To complete the transaction, you must: {round(conversion, 2)} UAH\n'                          f'Available balance_UAH: {self.available_uah}')            else:                print(f'\nYour exchange request:{client}_BTC is not correct')        except ValueError:            print('\nYour exchange request is not correct,value must be an integer')        except TypeError:            print('\nSorry: INVALID CURRENCY BTC')        finally:            print('Verification done\n')